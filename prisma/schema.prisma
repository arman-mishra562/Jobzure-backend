// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// @seed="ts-node prisma/seed.ts"

model Admin {
  id                  String           @id @default(cuid())
  email               String           @unique
  name                String?
  password            String
  isVerified          Boolean          @default(false)
  verificationToken   String?
  tokenExpiry         DateTime?
  resetToken          String?   // for password resets
  resetTokenExpiry    DateTime?
  assignedUsers       User[]          // Users assigned to this admin
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model SuperAdmin {
  id                  String           @id @default(cuid())
  email               String           @unique
  name                String?
  password            String
  isVerified          Boolean          @default(false)
  verificationToken   String?
  tokenExpiry         DateTime?
  resetToken          String?   // for password resets
  resetTokenExpiry    DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  name                String?
  password            String
  isVerified          Boolean          @default(false)
  verificationToken   String?   // for email verification
  tokenExpiry         DateTime?
  resetToken          String?   // for password resets
  resetTokenExpiry    DateTime?
  personalDetails     PersonalDetails?
  assignedAdminId     String?          // Reference to assigned Admin
  assignedAdmin       Admin?           @relation(fields: [assignedAdminId], references: [id])
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  status              UserStatus       @default(ACTIVE)
  applications        Application[]
  assignmentQueue     UserAssignmentQueue?
}

model PersonalDetails {
  id                  Int                 @id @default(autoincrement())
  full_name           String
  personalEmail       String
  countryResident     CountryResident
  workAuthorization   String
  salaryExp           Int
  visaSponsor         Boolean
  resumeUrl           String?
  userId              Int                @unique
  user                User               @relation(fields: [userId], references: [id])
  targetJobLocation TargetJobLocation[] @relation("JobLocations")
  interestedRoles   InterestedRole[]     @relation("Roles")
  intrstdIndstries  InterestedIndustry[] @relation("Industries")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model TargetJobLocation {
  value           String            @id
  personalDetails PersonalDetails[] @relation("JobLocations")
}

model InterestedRole {
  value           String            @id
  personalDetails PersonalDetails[] @relation("Roles")
}

model InterestedIndustry {
  value           String            @id
  personalDetails PersonalDetails[] @relation("Industries")
}

model Application {
  id              Int                @id @default(autoincrement())
  user            User               @relation(fields: [userId], references: [id])
  userId          Int
  companyName     String
  role            String
  applicationDate DateTime
  status          ApplicationStatus
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model UserAssignmentQueue {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum Status{
  APPLIED
  REVIEWING
  SHORTLISTED
  REJECTED
  PENDING_INTERVIEW
  HIRED
}

enum CountryResident {
  USA
  CANADA
  UK
  AUSTRALIA
  FRANCE
  GERMANY
  ITALY
}

enum ApplicationStatus {
  SUBMITTED
  IN_REVIEW
  INTERVIEW_SCHEDULED
  INTERVIEW_PENDING
  PENDING_RESULTS
  REJECTED
  SELECTED
  OFFER_LETTER_SHARED
  COMPLETED
}

enum UserStatus {
  ACTIVE
  DISABLED
}